% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FeatureSelectionRandom.R
\name{FeatureSelectionRandom}
\alias{FeatureSelectionRandom}
\title{FeatureSelectionRandom}
\description{
FeatureSelection child class to conduct random search
}
\section{Usage}{
\preformatted{fs = FeatureSelectionRandom$new()
}

See \link{FeatureSelection} for a description of the interface.
}

\section{Arguments}{

\itemize{
\item \code{pe} (\code{[PerformanceEvaluator]}).
\item \code{tm} (\code{[Terminator]}).
\item \code{max_features} (\code{integer(1)})
Maximum number of features
\item \code{batch_size} (\code{integer(1}):
Maximum number of feature combinations to try in a batch.
Each batch is possibly executed in parallel via \code{\link[mlr3:benchmark]{mlr3::benchmark()}}.
}
}

\section{Details}{

\code{$new()} creates a new object of class \link{FeatureSelectionRandom}.
\code{$get_result()} Returns best feature combination.
The interface is described in \link{FeatureSelection}.
}

\examples{
task = mlr3::mlr_tasks$get("boston_housing")
learner = mlr3::mlr_learners$get("regr.rpart")
resampling = mlr3::mlr_resamplings$get("cv", param_vals = list(folds = 5L))
pe = PerformanceEvaluator$new(task = task,learner = learner, resampling = resampling)
tm = TerminatorEvaluations$new(max_evaluations = 20)
fs = FeatureSelectionRandom$new(pe, tm, batch_size = 10, max_features = 8)
fs$calculate()
fs$get_result()
}
\seealso{
Other FeatureSelection: \code{\link{FeatureSelectionForward}},
  \code{\link{FeatureSelectionGenetic}},
  \code{\link{FeatureSelection}}
}
\concept{FeatureSelection}
